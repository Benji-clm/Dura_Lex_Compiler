#pragma once

#include <iostream>
#include <string>
#include <vector>

#include "array/ast_array_declarator.hpp"
#include "array/ast_array_index.hpp"
#include "array/ast_array_init.hpp"
#include "ast_constant.hpp"
#include "ast_context.hpp"
#include "ast_declaration.hpp"
#include "ast_direct_declarator.hpp"
#include "ast_identifier.hpp"
#include "ast_init_declarator.hpp"
#include "ast_jump_statement.hpp"
#include "ast_node.hpp"
#include "ast_scope.hpp"
#include "ast_size_of.hpp"
#include "ast_type_specifier.hpp"
#include "ast_type_specifier_node.hpp"
#include "conditional/ast_do_while.hpp"
#include "conditional/ast_for.hpp"
#include "conditional/ast_if_else.hpp"
#include "conditional/ast_while.hpp"
#include "function/ast_function_argument.hpp"
#include "function/ast_function_call.hpp"
#include "function/ast_function_declarator.hpp"
#include "function/ast_function_definition.hpp"
#include "function/ast_function_parameter.hpp"
#include "misc/ast_break.hpp"
#include "misc/ast_case.hpp"
#include "misc/ast_continue.hpp"
#include "misc/ast_enum.hpp"
#include "misc/ast_switch.hpp"
#include "misc/ast_typedef.hpp"
#include "operation/ast_assignment.hpp"
#include "operation/ast_assignment_op.hpp"
#include "operation/ast_increment.hpp"
#include "operation/ast_logical_operation.hpp"
#include "operation/ast_operation.hpp"
#include "operation/ast_operator_type.hpp"
#include "operation/ast_pre_increment.hpp"
#include "operation/ast_ternary.hpp"
#include "operation/ast_unary_expression.hpp"
#include "pointer/ast_pointer.hpp"
#include "pointer/ast_pointer_declarator.hpp"
#include "primitives/ast_char.hpp"
#include "primitives/ast_string.hpp"
#include "struct/ast_struct_definition.hpp"
#include "struct/ast_struct_access.hpp"
#include "struct/ast_struct_declaration.hpp"
#include "struct/ast_struct_instance.hpp"


ast::NodePtr ParseAST (std::string file_name);
